In Spring Boot, you can define RESTful API methods using the `@RequestMapping` annotation or its specialized counterparts such as `@GetMapping`, `@PostMapping`, `@PutMapping`, `@DeleteMapping`, and `@PatchMapping`. These annotations map HTTP requests to specific methods in your Spring Boot application. Here's an overview of each annotation and its usage:

1. `@RequestMapping`: This annotation is used to map any HTTP request method (GET, POST, PUT, DELETE, etc.) to a specific method in your controller. You can specify the URL path and other request parameters to define the mapping.

Example:
```java
@RequestMapping(value = "/users", method = RequestMethod.GET)
public List<User> getUsers() {
    // Implementation here
}
```

2. `@GetMapping`: This annotation is a specialized version of `@RequestMapping` for handling HTTP GET requests. It simplifies the mapping for GET requests.

Example:
```java
@GetMapping("/users/{id}")
public User getUserById(@PathVariable("id") Long id) {
    // Implementation here
}
```

3. `@PostMapping`: This annotation is used for mapping HTTP POST requests to a specific method. It is typically used for creating or adding resources.

Example:
```java
@PostMapping("/users")
public User createUser(@RequestBody User user) {
    // Implementation here
}
```

4. `@PutMapping`: This annotation is used to map HTTP PUT requests to update or replace an existing resource.

Example:
```java
@PutMapping("/users/{id}")
public User updateUser(@PathVariable("id") Long id, @RequestBody User updatedUser) {
    // Implementation here
}
```

5. `@DeleteMapping`: This annotation is used to map HTTP DELETE requests to delete a specific resource.

Example:
```java
@DeleteMapping("/users/{id}")
public void deleteUser(@PathVariable("id") Long id) {
    // Implementation here
}
```

6. `@PatchMapping`: This annotation is used to map HTTP PATCH requests to update or modify an existing resource partially.

Example:
```java
@PatchMapping("/users/{id}")
public User patchUser(@PathVariable("id") Long id, @RequestBody User patchedUser) {
    // Implementation here
}
```

These annotations can be used in a controller class, where each method handles a specific API endpoint. The methods can take request parameters, such as path variables, query parameters, and request bodies, to process and return the desired responses. Additionally, you can apply additional annotations like `@PathVariable`, `@RequestBody`, and `@RequestParam` to access and bind data from the HTTP request.