To marshal and unmarshal objects and lists using XML in Java, you can use the Java Architecture for XML Binding (JAXB) API. JAXB provides a convenient way to convert Java objects to XML representation (marshalling) and vice versa (unmarshalling). Here's how you can perform marshalling and unmarshalling with JAXB:

1. Marshalling (Object to XML):
To marshal a Java object to XML, you need to follow these steps:

a) Annotate the Java classes: Add JAXB annotations to the classes you want to marshal. Use annotations like `@XmlRootElement`, `@XmlElement`, and `@XmlAttribute` to specify the XML structure.

Example:

```java
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;

@XmlRootElement
public class Person {
    private String name;
    private int age;

    // Getters and setters

    @XmlElement
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @XmlElement
    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }
}
```

b) Perform marshalling:

```java
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import java.io.StringWriter;

public class MarshallingExample {
    public static void main(String[] args) {
        Person person = new Person();
        person.setName("John");
        person.setAge(30);

        try {
            JAXBContext jaxbContext = JAXBContext.newInstance(Person.class);
            Marshaller marshaller = jaxbContext.createMarshaller();
            marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);

            StringWriter stringWriter = new StringWriter();
            marshaller.marshal(person, stringWriter);

            String xml = stringWriter.toString();
            System.out.println(xml);
        } catch (JAXBException e) {
            e.printStackTrace();
        }
    }
}
```

The above code creates a `Person` object, sets its attributes, and marshals it to XML using JAXB. The resulting XML is printed to the console.

2. Unmarshalling (XML to Object):
To unmarshal XML back to a Java object, follow these steps:

a) Annotate the Java classes: The classes you want to unmarshal should be annotated with JAXB annotations, as shown in the previous example.

b) Perform unmarshalling:

```java
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;
import java.io.StringReader;

public class UnmarshallingExample {
    public static void main(String[] args) {
        String xml = "<person><name>John</name><age>30</age></person>";

        try {
            JAXBContext jaxbContext = JAXBContext.newInstance(Person.class);
            Unmarshaller unmarshaller = jaxbContext.createUnmarshaller();

            StringReader stringReader = new StringReader(xml);
            Person person = (Person) unmarshaller.unmarshal(stringReader);

            System.out.println("Name: " + person.getName());
            System.out.println("Age: " + person.getAge());
        } catch (JAXBException e) {
            e.printStackTrace();
        }
    }
}
```

In the above code, the XML string is unmarshalled using JAXB, and the resulting `Person` object is printed to the console.

3. Marshalling and Unmarshalling Lists of Objects:
To marshal and unmarshal a list of objects, you can use a wrapper class containing the list as a field. The wrapper class is then marshalled/unmarshalled as usual.

Example:

```java
import javax

.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import java.util.List;

@XmlRootElement
public class PersonListWrapper {
    private List<Person> persons;

    // Getter and setter for the list

    @XmlElement(name = "person")
    public List<Person> getPersons() {
        return persons;
    }

    public void setPersons(List<Person> persons) {
        this.persons = persons;
    }
}
```

You can then marshal/unmarshal the `PersonListWrapper` class instead of the individual `Person` objects.

These examples demonstrate how to perform marshalling and unmarshalling using XML with JAXB in Java. JAXB provides flexibility and customization options to handle more complex XML structures and mappings.